using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Net;
using System.Text.RegularExpressions;
namespace SpellChecker
{
    class Program
    {
        public class Sentence //class for objects to save in JSON format
        {
            public Sentence()
            {
                StartSentence = null;
                isCorrect = false;
                Mistakes = new string[0];
                Recommendations = new string[0];
                CorrectSentence = null;
            }
            public string StartSentence { get; set; }
            public bool isCorrect { get; set; }
            public string[] Mistakes { get; set; }
            public string[] Recommendations { get; set; }
            public string CorrectSentence { get; set; }
        }
        public static List<Sentence> _sentence = new List<Sentence>();
        public static void WriteToJsonFile<T>(string filePath, Sentence objectToWrite, bool append = false)
        {
            using (StreamWriter writer = new StreamWriter(filePath, true))
            {
                var contentsToWriteToFile = JsonConvert.SerializeObject(objectToWrite);
                writer.WriteLine(contentsToWriteToFile);
            }
        }
        static void Main(string[] args)
        {
            var api = new GingerItApi();
            Sentence obj;
            for (; ; )
            {
                Console.Write("Text to check: ");
                var text = Console.ReadLine();
                if (string.IsNullOrEmpty(text)) break;

                try
                {
                    obj = new Sentence();
                    obj.StartSentence = text;
                    var result = api.Check(text);
                    if (result?.Corrections?.Count != 0)
                    {
                        obj.isCorrect = false;
                        Console.WriteLine("Recommendations:");
                        obj.Mistakes = new string[result.Corrections.Count];
                        obj.Recommendations = new string[result.Corrections.Count];
                        for (int i = 0; i < result.Corrections.Count; i++)
                        {
                            var item = result.Corrections[i];
                            var mistakes = string.Join(", ", item.Mistakes.Select(x => $"{text.Substring(x.From, x.To - x.From + 1)}"));
                            obj.Mistakes[i] = mistakes;
                            var suggestions = string.Join(", ", item.Suggestions[0].Text);
                            obj.Recommendations[i] = suggestions;
                            var regex = new Regex(Regex.Escape(mistakes));
                            text = regex.Replace(text, suggestions, 1);
                            Console.WriteLine($"  {i + 1}: {mistakes} >> {suggestions}");
                        }
                        Console.WriteLine("Correct sentence: " + text);
                        obj.CorrectSentence = text;
                        Console.WriteLine();
                    }
                    else
                    {
                        obj.CorrectSentence = text;
                        obj.isCorrect = true;
                        Console.WriteLine("Looks okay.\n");
                    }
                    _sentence.Add(obj);
                    WriteToJsonFile<Sentence>(@"path/file.data", obj); // change full path to file

                }
                catch (Exception ex)
                {
                    Console.WriteLine($"**Error: {ex.Message}\n");
                }
            }
        }
    }

    class GingerItApi
    {
        public CheckResult Check(string text)
        {
            var request = WebRequest.Create($"https://services.gingersoftware.com/Ginger/correct/jsonSecured/GingerTheTextFull?callback=jQuery172015406464511272344_1490987331365&apiKey=GingerWebSite&lang=US&clientVersion=2.0&text={text}&_=1490987518060") as HttpWebRequest;
            WebResponse response = null;
            try
            {
                response = request.GetResponse();

                if (response != null)
                {
                    using (var reader = new StreamReader(response.GetResponseStream()))
                    {
                        string data = reader.ReadToEnd();
                        var first = data.IndexOf('{');
                        var last = data.LastIndexOf('}');
                        var json = data.Substring(first, last - first + 1);
                        return JsonConvert.DeserializeObject<CheckResult>(json);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
            return null;
        }
    }

    public class LrnFrgOrigIndx
    {
        [JsonProperty("From")]
        public int From { get; set; }

        [JsonProperty("To")]
        public int To { get; set; }
    }

    public class Mistake
    {
        [JsonProperty("Definition")]
        public string Definition { get; set; }

        [JsonProperty("CanAddToDict")]
        public bool CanAddToDict { get; set; }

        [JsonProperty("From")]
        public int From { get; set; }

        [JsonProperty("To")]
        public int To { get; set; }
    }

    public class Suggestion
    {
        [JsonProperty("Definition")]
        public string Definition { get; set; }

        [JsonProperty("LrnCatId")]
        public int LrnCatId { get; set; }

        [JsonProperty("Text")]
        public string Text { get; set; }
    }

    public class Correction
    {
        [JsonProperty("Confidence")]
        public int Confidence { get; set; }

        [JsonProperty("From")]
        public int From { get; set; }

        [JsonProperty("LrnFrg")]
        public string LrnFrg { get; set; }

        [JsonProperty("LrnFrgOrigIndxs")]
        public IList<LrnFrgOrigIndx> LrnFrgOrigIndxs { get; set; }

        [JsonProperty("Mistakes")]
        public IList<Mistake> Mistakes { get; set; }

        [JsonProperty("ShouldReplace")]
        public bool ShouldReplace { get; set; }

        [JsonProperty("Suggestions")]
        public IList<Suggestion> Suggestions { get; set; }

        [JsonProperty("To")]
        public int To { get; set; }

        [JsonProperty("TopLrnCatId")]
        public int TopLrnCatId { get; set; }

        [JsonProperty("Type")]
        public int Type { get; set; }

        [JsonProperty("UXFrgFrom")]
        public int UXFrgFrom { get; set; }

        [JsonProperty("UXFrgTo")]
        public int UXFrgTo { get; set; }
    }

    public class Sentence
    {
        [JsonProperty("FromIndex")]
        public int FromIndex { get; set; }

        [JsonProperty("IsEnglish")]
        public bool IsEnglish { get; set; }

        [JsonProperty("ToIndex")]
        public int ToIndex { get; set; }
    }

    public class CheckResult
    {
        [JsonProperty("Corrections")]
        public IList<Correction> Corrections { get; set; }

        [JsonProperty("Sentences")]
        public IList<Sentence> Sentences { get; set; }
    }
}
